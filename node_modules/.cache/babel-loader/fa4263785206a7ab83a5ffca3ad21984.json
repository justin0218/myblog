{"ast":null,"code":"var Event = {\n  // 通过on接口监听事件eventName\n  // 如果事件eventName被触发，则执行callback回调函数\n  on: function on(eventName, callback) {\n    console.log(\"onnnn\");\n\n    if (!this.handles) {\n      this.handles = {};\n      Object.defineProperty(this, \"handles\", {\n        //限制下方Object.assign浅拷贝枚举对象\n        value: {},\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n\n    if (!this.handles[eventName]) {\n      this.handles[eventName] = [];\n    }\n\n    this.handles[eventName].push(callback);\n  },\n  // 触发事件 eventName\n  emit: function emit(eventName) {\n    console.log(\"emit\"); //你的代码\n\n    if (this.handles[arguments[0]]) {\n      for (var i = 0; i < this.handles[arguments[0]].length; i++) {\n        this.handles[arguments[0]][i](arguments[1]);\n      }\n    }\n  }\n};\nexport default Event;","map":{"version":3,"sources":["/Users/justin/Desktop/private/nextjs/utils/emiter.js"],"names":["Event","on","eventName","callback","console","log","handles","Object","defineProperty","value","enumerable","configurable","writable","push","emit","arguments","i","length"],"mappings":"AAAA,IAAMA,KAAK,GAAG;AACV;AACA;AACAC,EAAAA,EAAE,EAAE,YAAUC,SAAV,EAAqBC,QAArB,EAA+B;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACF,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,WAAKA,OAAL,GAAe,EAAf;AACAC,MAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AAAE;AACvCC,QAAAA,KAAK,EAAE,EAD8B;AAErCC,QAAAA,UAAU,EAAE,KAFyB;AAGrCC,QAAAA,YAAY,EAAE,IAHuB;AAIrCC,QAAAA,QAAQ,EAAE;AAJ2B,OAAvC;AAMH;;AACC,QAAI,CAAC,KAAKN,OAAL,CAAaJ,SAAb,CAAL,EAA8B;AAC5B,WAAKI,OAAL,CAAaJ,SAAb,IAA0B,EAA1B;AACD;;AACD,SAAKI,OAAL,CAAaJ,SAAb,EAAwBW,IAAxB,CAA6BV,QAA7B;AACD,GAlBS;AAmBV;AACAW,EAAAA,IAAI,EAAE,cAAUZ,SAAV,EAAqB;AACvBE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADuB,CAE3B;;AACE,QAAI,KAAKC,OAAL,CAAaS,SAAS,CAAC,CAAD,CAAtB,CAAJ,EAAgC;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,OAAL,CAAaS,SAAS,CAAC,CAAD,CAAtB,EAA2BE,MAA/C,EAAuDD,CAAC,EAAxD,EAA4D;AAC1D,aAAKV,OAAL,CAAaS,SAAS,CAAC,CAAD,CAAtB,EAA2BC,CAA3B,EAA8BD,SAAS,CAAC,CAAD,CAAvC;AACD;AACF;AACF;AA5BS,CAAd;AA8BA,eAAef,KAAf","sourcesContent":["const Event = {\n    // 通过on接口监听事件eventName\n    // 如果事件eventName被触发，则执行callback回调函数\n    on: function (eventName, callback) {\n        console.log(\"onnnn\")\n    　　if (!this.handles) {\n    　　　　this.handles = {};\n    　　　　Object.defineProperty(this, \"handles\", { //限制下方Object.assign浅拷贝枚举对象\n    　　　　　　value: {},\n    　　　　　　enumerable: false,\n    　　　　　　configurable: true,\n    　　　　　　writable: true\n    　　　　})\n    }\n    　　if (!this.handles[eventName]) {\n    　　　　this.handles[eventName] = [];\n    　　}\n    　　this.handles[eventName].push(callback);\n    },\n    // 触发事件 eventName\n    emit: function (eventName) {\n        console.log(\"emit\")\n    //你的代码\n    　　if (this.handles[arguments[0]]) {\n    　　　　for (var i = 0; i < this.handles[arguments[0]].length; i++) {\n    　　　　　　this.handles[arguments[0]][i](arguments[1]);\n    　　　　}\n    　　}\n    }\n};\nexport default Event;"]},"metadata":{},"sourceType":"module"}