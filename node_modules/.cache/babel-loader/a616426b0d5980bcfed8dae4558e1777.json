{"ast":null,"code":"var Event = {\n  // 通过on接口监听事件eventName\n  // 如果事件eventName被触发，则执行callback回调函数\n  on: function on(eventName, callback) {\n    console.log(\"onnnn\");\n\n    if (!this.handles) {\n      this.handles = {};\n      Object.defineProperty(this, \"handles\", {\n        //限制下方Object.assign浅拷贝枚举对象\n        value: {},\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n\n    if (!this.handles[eventName]) {\n      this.handles[eventName] = [];\n    }\n\n    this.handles[eventName].push(callback);\n  },\n  // 触发事件 eventName\n  emit: function emit(eventName) {\n    //你的代码\n    if (this.handles && this.handles[arguments[0]]) {\n      for (var i = 0; i < this.handles[arguments[0]].length; i++) {\n        this.handles[arguments[0]][i](arguments[1]);\n      }\n    }\n  }\n};\nexport default Event;","map":null,"metadata":{},"sourceType":"module"}