{"ast":null,"code":"\"use strict\";\n\n/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar grpc = {};\ngrpc.web = require('grpc-web');\n\nvar proto = require('./payserver_pb.js');\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.PaySvrClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'binary';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n\n  this.credentials_ = credentials;\n  /**\n   * @private @const {?Object} Options for the client\n   */\n\n  this.options_ = options;\n};\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\n\n\nproto.PaySvrPromiseClient = function (hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'binary';\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n  /**\n   * @private @const {string} The hostname\n   */\n\n  this.hostname_ = hostname;\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n\n  this.credentials_ = credentials;\n  /**\n   * @private @const {?Object} Options for the client\n   */\n\n  this.options_ = options;\n};\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.TestReq,\n *   !proto.TestRes>}\n */\n\n\nvar methodDescriptor_PaySvr_Test = new grpc.web.MethodDescriptor('/PaySvr/Test', grpc.web.MethodType.UNARY, proto.TestReq, proto.TestRes,\n/** @param {!proto.TestReq} request */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.TestRes.deserializeBinary);\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.TestReq,\n *   !proto.TestRes>}\n */\n\nvar methodInfo_PaySvr_Test = new grpc.web.AbstractClientBase.MethodInfo(proto.TestRes,\n/** @param {!proto.TestReq} request */\nfunction (request) {\n  return request.serializeBinary();\n}, proto.TestRes.deserializeBinary);\n/**\n * @param {!proto.TestReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.TestRes)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.TestRes>|undefined}\n *     The XHR Node Readable Stream\n */\n\nproto.PaySvrClient.prototype.test = function (request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ + '/PaySvr/Test', request, metadata || {}, methodDescriptor_PaySvr_Test, callback);\n};\n/**\n * @param {!proto.TestReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.TestRes>}\n *     A native promise that resolves to the response\n */\n\n\nproto.PaySvrPromiseClient.prototype.test = function (request, metadata) {\n  return this.client_.unaryCall(this.hostname_ + '/PaySvr/Test', request, metadata || {}, methodDescriptor_PaySvr_Test);\n};\n\nmodule.exports = proto;","map":{"version":3,"sources":["/Users/justin/Desktop/private/nextjs/proto/echo_grpc_pb.js"],"names":["grpc","web","require","proto","PaySvrClient","hostname","credentials","options","client_","GrpcWebClientBase","hostname_","credentials_","options_","PaySvrPromiseClient","methodDescriptor_PaySvr_Test","MethodDescriptor","MethodType","UNARY","TestReq","TestRes","request","serializeBinary","deserializeBinary","methodInfo_PaySvr_Test","AbstractClientBase","MethodInfo","prototype","test","metadata","callback","rpcCall","unaryCall","module","exports"],"mappings":";;AAAA;;;;;AAMA;AAIA,IAAMA,IAAI,GAAG,EAAb;AACAA,IAAI,CAACC,GAAL,GAAWC,OAAO,CAAC,UAAD,CAAlB;;AAEA,IAAMC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAArB;AAEA;;;;;;;;;;AAQAC,KAAK,CAACC,YAAN,GACI,UAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,QAApB;AAEA;;;;AAGA,OAAKC,OAAL,GAAe,IAAIR,IAAI,CAACC,GAAL,CAASQ,iBAAb,CAA+BF,OAA/B,CAAf;AAEA;;;;AAGA,OAAKG,SAAL,GAAiBL,QAAjB;AAEA;;;;;AAIA,OAAKM,YAAL,GAAoBL,WAApB;AAEA;;;;AAGA,OAAKM,QAAL,GAAgBL,OAAhB;AACD,CAzBD;AA4BA;;;;;;;;;;AAQAJ,KAAK,CAACU,mBAAN,GACI,UAASR,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyC;AAC3C,MAAI,CAACA,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdA,EAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,QAApB;AAEA;;;;AAGA,OAAKC,OAAL,GAAe,IAAIR,IAAI,CAACC,GAAL,CAASQ,iBAAb,CAA+BF,OAA/B,CAAf;AAEA;;;;AAGA,OAAKG,SAAL,GAAiBL,QAAjB;AAEA;;;;;AAIA,OAAKM,YAAL,GAAoBL,WAApB;AAEA;;;;AAGA,OAAKM,QAAL,GAAgBL,OAAhB;AACD,CAzBD;AA4BA;;;;;;;;AAMA,IAAMO,4BAA4B,GAAG,IAAId,IAAI,CAACC,GAAL,CAASc,gBAAb,CACnC,cADmC,EAEnCf,IAAI,CAACC,GAAL,CAASe,UAAT,CAAoBC,KAFe,EAGnCd,KAAK,CAACe,OAH6B,EAInCf,KAAK,CAACgB,OAJ6B;AAKnC;AACA,UAASC,OAAT,EAAkB;AAChB,SAAOA,OAAO,CAACC,eAAR,EAAP;AACD,CARkC,EASnClB,KAAK,CAACgB,OAAN,CAAcG,iBATqB,CAArC;AAaA;;;;;;;AAMA,IAAMC,sBAAsB,GAAG,IAAIvB,IAAI,CAACC,GAAL,CAASuB,kBAAT,CAA4BC,UAAhC,CAC7BtB,KAAK,CAACgB,OADuB;AAE7B;AACA,UAASC,OAAT,EAAkB;AAChB,SAAOA,OAAO,CAACC,eAAR,EAAP;AACD,CAL4B,EAM7BlB,KAAK,CAACgB,OAAN,CAAcG,iBANe,CAA/B;AAUA;;;;;;;;;;;AAUAnB,KAAK,CAACC,YAAN,CAAmBsB,SAAnB,CAA6BC,IAA7B,GACI,UAASP,OAAT,EAAkBQ,QAAlB,EAA4BC,QAA5B,EAAsC;AACxC,SAAO,KAAKrB,OAAL,CAAasB,OAAb,CAAqB,KAAKpB,SAAL,GACxB,cADG,EAEHU,OAFG,EAGHQ,QAAQ,IAAI,EAHT,EAIHd,4BAJG,EAKHe,QALG,CAAP;AAMD,CARD;AAWA;;;;;;;;;;AAQA1B,KAAK,CAACU,mBAAN,CAA0Ba,SAA1B,CAAoCC,IAApC,GACI,UAASP,OAAT,EAAkBQ,QAAlB,EAA4B;AAC9B,SAAO,KAAKpB,OAAL,CAAauB,SAAb,CAAuB,KAAKrB,SAAL,GAC1B,cADG,EAEHU,OAFG,EAGHQ,QAAQ,IAAI,EAHT,EAIHd,4BAJG,CAAP;AAKD,CAPD;;AAUAkB,MAAM,CAACC,OAAP,GAAiB9B,KAAjB","sourcesContent":["/**\n * @fileoverview gRPC-Web generated client stub for \n * @enhanceable\n * @public\n */\n\n// GENERATED CODE -- DO NOT EDIT!\n\n\n\nconst grpc = {};\ngrpc.web = require('grpc-web');\n\nconst proto = require('./payserver_pb.js');\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.PaySvrClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'binary';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @param {string} hostname\n * @param {?Object} credentials\n * @param {?Object} options\n * @constructor\n * @struct\n * @final\n */\nproto.PaySvrPromiseClient =\n    function(hostname, credentials, options) {\n  if (!options) options = {};\n  options['format'] = 'binary';\n\n  /**\n   * @private @const {!grpc.web.GrpcWebClientBase} The client\n   */\n  this.client_ = new grpc.web.GrpcWebClientBase(options);\n\n  /**\n   * @private @const {string} The hostname\n   */\n  this.hostname_ = hostname;\n\n  /**\n   * @private @const {?Object} The credentials to be used to connect\n   *    to the server\n   */\n  this.credentials_ = credentials;\n\n  /**\n   * @private @const {?Object} Options for the client\n   */\n  this.options_ = options;\n};\n\n\n/**\n * @const\n * @type {!grpc.web.MethodDescriptor<\n *   !proto.TestReq,\n *   !proto.TestRes>}\n */\nconst methodDescriptor_PaySvr_Test = new grpc.web.MethodDescriptor(\n  '/PaySvr/Test',\n  grpc.web.MethodType.UNARY,\n  proto.TestReq,\n  proto.TestRes,\n  /** @param {!proto.TestReq} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.TestRes.deserializeBinary\n);\n\n\n/**\n * @const\n * @type {!grpc.web.AbstractClientBase.MethodInfo<\n *   !proto.TestReq,\n *   !proto.TestRes>}\n */\nconst methodInfo_PaySvr_Test = new grpc.web.AbstractClientBase.MethodInfo(\n  proto.TestRes,\n  /** @param {!proto.TestReq} request */\n  function(request) {\n    return request.serializeBinary();\n  },\n  proto.TestRes.deserializeBinary\n);\n\n\n/**\n * @param {!proto.TestReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @param {function(?grpc.web.Error, ?proto.TestRes)}\n *     callback The callback function(error, response)\n * @return {!grpc.web.ClientReadableStream<!proto.TestRes>|undefined}\n *     The XHR Node Readable Stream\n */\nproto.PaySvrClient.prototype.test =\n    function(request, metadata, callback) {\n  return this.client_.rpcCall(this.hostname_ +\n      '/PaySvr/Test',\n      request,\n      metadata || {},\n      methodDescriptor_PaySvr_Test,\n      callback);\n};\n\n\n/**\n * @param {!proto.TestReq} request The\n *     request proto\n * @param {?Object<string, string>} metadata User defined\n *     call metadata\n * @return {!Promise<!proto.TestRes>}\n *     A native promise that resolves to the response\n */\nproto.PaySvrPromiseClient.prototype.test =\n    function(request, metadata) {\n  return this.client_.unaryCall(this.hostname_ +\n      '/PaySvr/Test',\n      request,\n      metadata || {},\n      methodDescriptor_PaySvr_Test);\n};\n\n\nmodule.exports = proto;\n\n"]},"metadata":{},"sourceType":"script"}