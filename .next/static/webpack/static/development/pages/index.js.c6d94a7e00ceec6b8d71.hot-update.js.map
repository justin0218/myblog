{"version":3,"file":"static/webpack/static/development/pages/index.js.c6d94a7e00ceec6b8d71.hot-update.js","sources":["webpack:///./apis/blog.js"],"sourcesContent":["import axios from 'axios';\nimport {apiHost} from '../utils/config';\nimport readStream from '../utils/util';\nimport protobuf from \"../proto/resp_pb\";\nimport blobComment from \"../proto/blogComment_pb\";\nexport const GetBlogList = async (tp,name) => {\n    let res = await axios.get(`${apiHost}/v1/client/blog/list?tp=${tp}&name=${name}`,{\n        responseType: 'blob'\n    })\n    let data = await readStream(res.data);\n    let message = protobuf.blog_list.deserializeBinary(data);\n    data = message.toObject();\n    return data;\n}\n\nexport const GetBlogDetail = async (id) => {\n    let meDetail = await axios.get(`${apiHost}/v1/client/blog/detail?id=${id}`,{\n        responseType: 'blob'\n    })\n    let medata = await readStream(meDetail.data);\n    let meMessage = protobuf.blog_detail.deserializeBinary(medata);\n    return meMessage.toObject();\n}\n\nexport const GetBlogTypes = async () => {\n    let res = await axios.get(`${apiHost}/v1/client/blog/types`,{\n        responseType: 'blob'\n    })\n    let data = await readStream(res.data);\n    let message = protobuf.blog_types.deserializeBinary(data);\n    return message.toObject();\n}\n\nexport const GetBlogRanking = async (limit = 5) => {\n    let rankingRes = await axios.get(`${apiHost}/v1/client/blog/ranking?limit=${limit}`,{\n        responseType: 'blob'\n    })\n    let rankingData = await readStream(rankingRes.data);\n    let rankingMessage = protobuf.blog_list.deserializeBinary(rankingData);\n    return rankingMessage.toObject();\n}\n\nexport const GetBlogRecommend = async () => {\n    let recommendRes = await axios.get(`${apiHost}/v1/client/blog/recommend`,{\n        responseType: 'blob'\n    })\n    let recommendData = await readStream(recommendRes.data);\n    let recommendMessage = protobuf.blog_list.deserializeBinary(recommendData);\n    return recommendMessage.toObject();\n}\n\nexport const GetBlogComments = async (id = 0) => {\n    let commentRes = await axios.get(`${apiHost}/v1/client/blog/comment/list?blog_id=${id}`,{\n        responseType: 'blob'\n    })\n    let commentData = await readStream(commentRes.data);\n    let commentMessage = protobuf.blog_comments.deserializeBinary(commentData);\n    console.log(commentMessage.toObject())\n    return commentMessage.toObject()\n}\n\nexport const SubMitComment = async (saytext) => {\n    let message = new blobComment.blog_comment();\n        message.setContent(saytext);\n        message.setBlogId(0);\n    let bytes = message.serializeBinary();\n    try {\n      let res = await axios.post(`${apiHost}/v1/blog/messageboard/submit`,bytes,{headers: {'Content-Type':'application/octet-stream'}})\n      await this.getComments();\n    } catch (error) {\n      if(error == \"Error: Request failed with status code 400\"){\n        alert(\"评论内容不能为空\")\n      }else if(error == \"Error: Request failed with status code 500\"){\n        alert(\"内部出现错误\")\n      }else if(error == \"Error: Request failed with status code 403\"){\n        alert(\"今天您对改博客的评论已达到上限\")\n      }\n    }\n}\n\n\n\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AACA;AANA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAPA;AAMA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}